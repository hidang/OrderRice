@using OrderRice.Model
@using OrderRice.Service
@using OrderRice.Pages.Admin.Components
@inject OrderRiceService orderRiceService

<tr>
    <td>@User.name</td>
    <td>@_strDishs</td>
    <td>@User.note</td>

    @if (!isEditingTongTien)
    {
        <td>
            <div style="display: flex; align-items: center; justify-content: flex-end;">
                @User.tongTien
                <MudIconButton Variant="Variant.Filled"
                    Color="Color.Success"
                    Class="ml-2"
                    OnClick="HandleClickEditTongTien"
                    Icon="@Icons.Material.Filled.Edit">
                >
                </MudIconButton>
            </div>
        </td>
    }
    else
    {
        <td>
            @*<EditForm @bind-_strContent="_strTongTien" EditContext="@EditTongTien" HandleClickEditPrice="@HandleClickEditTongTien" />*@
            <MudTextField @bind-Value="_strTongTien"
                          InputType="InputType.Number"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          AutoFocus="true"
                          Immediate="true">
            </MudTextField>

            <MudButton Variant="Variant.Filled"
                       Style="background-color: green; color: white;"
                       Class="ml-2"
                       OnClick="EditTongTien">
                OK
            </MudButton>

            <MudButton Variant="Variant.Filled"
                       Style="background-color: darkred; color: white;"
                       Class="ml-2"
                       OnClick="HandleClickEditTongTien">
                Cancel
            </MudButton>
        </td>
    }


    @if (!isEditingTienDaNhan)
    {
        <td>
            <div style="display: flex; align-items: center; justify-content: flex-end;">
                        @User.tienDaNhan
                <MudIconButton Variant="Variant.Filled"
                        Color="Color.Success"
                        Class="ml-2"
                        OnClick="HandleClickEditTienDaNhan"
                        Icon="@Icons.Material.Filled.Edit">
                </MudIconButton>
                <MudIconButton Variant="Variant.Filled"
                        Color="Color.Warning"
                        Class="ml-2"
                        OnClick="EditTienDaNhanNhanh"
                        Icon="@Icons.Material.Filled.FastForward">
                    Nhanh
                </MudIconButton>
            </div>
        </td>
    }
    else
    {
        <td>
            <MudTextField @bind-Value="_strTienDaNhan"
                          InputType="InputType.Number"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          AutoFocus="true"
                          Immediate="true">
            </MudTextField>

            <MudButton Variant="Variant.Filled"
                       Style="background-color: green; color: white;"
                       Class="ml-2"
                       OnClick="EditTienDaNhan">
                OK
            </MudButton>

            <MudButton Variant="Variant.Filled"
                       Style="background-color: darkred; color: white;"
                       Class="ml-2"
                       OnClick="HandleClickEditTienDaNhan">
                Cancel
            </MudButton>
        </td>
    }

    <td>
        <MudIconButton Variant="Variant.Filled"
                   Color="Color.Error"
                   Class="mx-2"
                   OnClick="DeleteUser"
                   Icon="@Icons.Material.Filled.Delete"
                   >
        </MudIconButton>
    </td>
</tr>

@code {
    [Parameter]
    public User User { get; set; }
    [Parameter]
    public EventCallback<string> OnEventChange { get; set; }
    string _strDishs { get; set; } = "";
    @*---------------TongTienEdit------------------------*@
    bool isEditingTongTien { get; set; } = false;
    string _strTongTien { get; set; }
    string tempTongTien { get; set; }

    //when user click Edit button
    public void HandleClickEditTongTien()
    {
        if (!isEditingTongTien)
        {
            isEditingTongTien = true;
            tempTongTien = _strTongTien;
        }
        else
        {
            _strTongTien = tempTongTien;
            isEditingTongTien = false;
        }
    }
    //when user click OK -> EDIT
    public async void EditTongTien()
    {
        User.tongTien = Int32.Parse(_strTongTien);

        bool result = await orderRiceService.UpdateUserAsync(User);
        if (result)
        {
            isEditingTongTien = false;
            await OnEventChange.InvokeAsync(User.id);
        }
        else
        {
            //TODO: show message error: edit that bai
        }
    }
    @*---------------TienDaNhan--------------------*@
    bool isEditingTienDaNhan { get; set; } = false;
    string _strTienDaNhan { get; set; }
    string tempTienDaNhan { get; set; }

    //when user click Edit button
    void HandleClickEditTienDaNhan()
    {
        if (!isEditingTienDaNhan)
        {
            isEditingTienDaNhan = true;
            tempTienDaNhan = _strTienDaNhan;
        }
        else
        {
            _strTienDaNhan = tempTienDaNhan;
            isEditingTienDaNhan = false;
        }
    }
    //when user click OK -> EDIT
    async void EditTienDaNhan()
    {
        User.tienDaNhan = Int32.Parse(_strTienDaNhan);

        bool result = await orderRiceService.UpdateUserAsync(User);

        if (result)
        {
            isEditingTienDaNhan = false;
            await OnEventChange.InvokeAsync(User.id);
        }
        else
        {
            //TODO: show message error: edit that bai
        }
    }
    async void EditTienDaNhanNhanh()
    {
        _strTienDaNhan = User.tongTien.ToString();
        User.tienDaNhan = User.tongTien;

        bool result = await orderRiceService.UpdateUserAsync(User);

        if (result)
        {
            isEditingTienDaNhan = false;
            await OnEventChange.InvokeAsync(User.id);
        }
        else
        {
            //TODO: show message error: edit that bai
        }
    }
    //------------------------------------------------------
    protected override void OnParametersSet()
    {
        _strTongTien = User.tongTien.ToString();
        _strTienDaNhan = User.tienDaNhan.ToString();
        _strDishs = "";
        //get Name of dishs in User
        if (User.dishs != null)
            foreach (var dish in User.dishs)
            {
                _strDishs += dish.name + ",";
            }
        if (_strDishs.Length > 0)
            _strDishs = _strDishs.Remove(_strDishs.Length - 1);
    }
    //Delete User
    async void DeleteUser()
    {
        bool result = await orderRiceService.DeleteUserAsync(User.id);
        if (result)
        {
            await OnEventChange.InvokeAsync(User.id);
        }
        else
        {
            //TODO: show message error: delete that bai
        }
    }

    //because delete this component
    @*async void IDisposable.Dispose()
    {
        try
        {
            await OnEventChange.InvokeAsync("hehe");

        }
        catch
        {

        }
    }*@
}
