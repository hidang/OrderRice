@using OrderRice.Model
@inject IJSRuntime JSRuntime

<table class="table">
    <thead>
        <tr>
            <th>Title</th>
            <th>Content</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Tiền đã nhận:</td>
            <td>@(TienDaNhan)k</td>
        </tr>
        <tr>
            <td>Tiền cần thối:</td>
            <td>@strTienCanThoi</td>
        </tr>
        <tr>
            <td><b>Số lượng:</b></td>
            <td>@SoLuongDish phần cơm@(SoLuongDishPlus == 0? "": $", {SoLuongDishPlus} đồ ăn thêm")</td>
        </tr>
        <tr>
            <td><b>Tổng bill:</b></td>
            <td>@(TongBill)k</td>
        </tr>
        <tr>
            <td><b>Còn thiếu:</b></td>
            <td>@(TongBill - TienDaNhan + TongTienThoi < 0? 0: TongBill - TienDaNhan + TongTienThoi)k</td>
        </tr>
        <tr>
            <td><b>Output:</b></td>
            <td>
                <div style="display: flex; align-items: center; justify-content: space-between;">
                    @strOutput
                    <MudIconButton Variant="Variant.Filled"
                                   Class="ml-2"
                                   OnClick="CopyTextToClipboard"
                                   Icon="@Icons.Material.Filled.ContentCopy">
                    </MudIconButton>
                </div>
            </td>
        </tr>
    </tbody>
</table>

@code {
    [Parameter]
    public List<Dish> Dishs { get; set; }
    [Parameter]
    public List<User> Users { get; set; }
    [Parameter]
    public EventCallback<string> OnEventChange { get; set; }

    int TienDaNhan { get; set; } = 0;
    int TongBill { get; set; } = 0;
    string strOutput { get; set; } = "";
    int SoLuongDish { get; set; } = 0;
    string strTienCanThoi { get; set; } = "";
    int SoLuongDishPlus { get; set; } = 0;
    int TongTienThoi { get; set; } = 0;
    int tempTienThoi;

    void CreateReport()
    {
        TienDaNhan = 0;
        TongBill = 0;
        strOutput = "";
        SoLuongDish = 0;
        SoLuongDishPlus = 0;
        strTienCanThoi = "";
        TongTienThoi = 0;

        List<string> nameDishs = new();
        List<string> nameDishsPlus = new();

        foreach (var user in Users)
        {
            TienDaNhan += user.tienDaNhan;
            TongBill += user.tongTien;
            if (user.dishs != null)
                for (int i = 0; i < user.dishs.Count; i++)
                {
                    if(i == 0)
                    {
                        nameDishs.Add(user.dishs[i].name);
                        SoLuongDish++;
                    }
                    else
                    {
                        nameDishsPlus.Add(user.dishs[i].name);
                        SoLuongDishPlus++;
                    }
                }
            tempTienThoi = user.tienDaNhan - user.tongTien;
            if (tempTienThoi > 0)
            {
                strTienCanThoi += user.name + ": " + tempTienThoi.ToString() + "k | ";
                TongTienThoi += tempTienThoi;
            }
        }
        @*var userDishOrderd = Users.SelectMany(c => c.dish.Split(','));*@
        var distCount = nameDishs.GroupBy(c => c).Select(c => $"{c.Count()} phần {c.Key}");
        strOutput = String.Join(", ", distCount);
        if (SoLuongDishPlus > 0)
        {
            var distPlusCount = nameDishsPlus.GroupBy(c => c).Select(c => $"{c.Count()} {c.Key}");
            strOutput += " | Đồ ăn thêm: " + String.Join(", ", distPlusCount);
        }
    }

    protected override void OnParametersSet()
    {
        CreateReport();
    }

    private async Task CopyTextToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("CopyToClipboard", strOutput);
    }
}
