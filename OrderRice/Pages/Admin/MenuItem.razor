@using OrderRice.Model
@using OrderRice.Service
@inject OrderRiceService orderRiceService

<tr>
    <td>@Dish.name</td>
    @*Price*@
    @if (!isEditingPrice)
    {
        <td style="display: flex; align-items: center; justify-content: space-between;">
            @_strGia
            <MudIconButton Variant="Variant.Filled"
                           Color="Color.Success"
                           Class="ml-2"
                           OnClick="HandleClickEditPrice"
                           Icon="@Icons.Material.Filled.Edit">
                >
            </MudIconButton>
        </td>
    }
    else
    {
        <td style="display: flex; align-items: center;">
            <MudItem sm="6" md="4">
                <MudTextField @bind-Value="_strGia"
                              InputType="InputType.Number"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense"
                              AutoFocus="true"
                              Immediate="true">
                </MudTextField>
            </MudItem>
            <MudIconButton Variant="Variant.Filled"
                           Color="Color.Success"
                           Class="ml-2"
                           OnClick="EditPrice"
                           Icon="@Icons.Material.Filled.Check">
                >
            </MudIconButton>

            <MudIconButton Variant="Variant.Filled"
                           Class="ml-2"
                           OnClick="HandleClickEditPrice"
                           Icon="@Icons.Material.Filled.Cancel">
            </MudIconButton>
        </td>
    }
    @*Price +Plus*@
    @if (!isEditingPricePlus)
    {
        <td>
            @_strGiaPlus
            <MudIconButton Variant="Variant.Filled"
                           Color="Color.Success"
                           Class="ml-2"
                           OnClick="HandleClickEditPricePlus"
                           Icon="@Icons.Material.Filled.Edit">
                >
            </MudIconButton>
        </td>
    }
    else
    {
        <td>
            <MudItem sm="6" md="4">
                <MudTextField @bind-Value="_strGiaPlus"
                              InputType="InputType.Number"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense"
                              AutoFocus="true"
                              Immediate="true">
                </MudTextField>
            </MudItem>
            <MudIconButton Variant="Variant.Filled"
                           Color="Color.Success"
                           Class="ml-1"
                           OnClick="EditPricePlus"
                           Icon="@Icons.Material.Filled.Check">
                >
            </MudIconButton>

            <MudIconButton Variant="Variant.Filled"
                           OnClick="HandleClickEditPricePlus"
                           Icon="@Icons.Material.Filled.Cancel">
            </MudIconButton>
        </td>
    }

    <td>
        <MudIconButton Variant="Variant.Filled"
                       Color="Color.Error"
                       OnClick="DeleteDish"
                       Icon="@Icons.Material.Filled.Delete">
        </MudIconButton>
    </td>
</tr>


@code {
    [Parameter]
    public Dish Dish { get; set; }
    [Parameter]
    public EventCallback<string> OnEventChange { get; set; }

    string _strGia { get; set; }
    string _strGiaPlus { get; set; }

    protected override void OnInitialized()
    {
        _strGia = Dish.gia.ToString();
        _strGiaPlus = Dish.giaDoAn.ToString();
    }
    //----------------Price----------------------
    bool isEditingPrice { get; set; } = false;
    string tempPrice { get; set; }

    //when user click Edit button
    void HandleClickEditPrice()
    {
        if (!isEditingPrice)
        {
            isEditingPrice = true;
            tempPrice = _strGia;
        }
        else
        {
            _strGia = tempPrice;
            isEditingPrice = false;
        }
    }

    //when user click OK -> EDIT
    async void EditPrice()
    {
        Dish.gia = Int32.Parse(_strGia);

        bool result = await orderRiceService.UpdateDishAsync(Dish);
        if (result)
        {
            isEditingPrice = false;
            await OnEventChange.InvokeAsync(Dish.id);
        }
        else
        {
            //TODO: show message error: edit that bai
        }
    }
    //---------------Price Plus----------------------
    bool isEditingPricePlus { get; set; } = false;
    string tempPricePlus { get; set; }

    //when user click Edit button
    void HandleClickEditPricePlus()
    {
        if (!isEditingPricePlus)
        {
            isEditingPricePlus = true;
            tempPricePlus = _strGiaPlus;
        }
        else
        {
            _strGiaPlus = tempPricePlus;
            isEditingPricePlus = false;
        }
    }

    //when user click OK -> EDIT
    async void EditPricePlus()
    {
        Dish.giaDoAn = Int32.Parse(_strGiaPlus);

        bool result = await orderRiceService.UpdateDishAsync(Dish);
        if (result)
        {
            isEditingPricePlus = false;
            await OnEventChange.InvokeAsync(Dish.id);
        }
        else
        {
            //TODO: show message error: edit that bai
        }
    }
    //----------------------------------------------
    async void DeleteDish()
    {
        bool result = await orderRiceService.DeleteDishAsync(Dish.id);
        if (result)
        {
            await OnEventChange.InvokeAsync(Dish.id);
        }else
        {
            //TODO: show message error: delete that bai
        }
    }
}
