@using OrderRice.Model
@using OrderRice.Service

@inject OrderRiceService orderRiceService

@foreach (var dish in Dishs)
{
    <MudItem>
        <DishItem @ref="_mudAnhNhat" dish="@dish" UpdateDishSelecteds="@(async () => { await UpdateDishSelecteds(dish); })" isChecked="@(DishSelecteds.Contains(dish) ? true : false)" />
    </MudItem>
    @*<input class="form-check-input" value="@(DishSelecteds.Contains(dish) ? true : false)" type="checkbox" @onchange="async eventArgs => { await UpdateDishSelecteds(dish, eventArgs.Value); }" />*@
}

@code {
    DishItem _mudAnhNhat;
    [Parameter]
    public List<Dish> DishSelecteds { get; set; }
    [Parameter]
    public EventCallback<List<Dish>> DishSelectedsChanged { get; set; }
    [Parameter]
    public List<Dish> Dishs { get; set; }

    public async Task UpdateDishSelecteds(Dish dish)
    {
        if (!DishSelecteds.Contains(dish))
        {
            DishSelecteds.Add(dish);
        }
        else
        {
            DishSelecteds.Remove(dish);
        }
        await DishSelectedsChanged.InvokeAsync(DishSelecteds);
    }

    public async void Refesh()
    {
        Dishs = new();
        Dishs = await orderRiceService.GetDishAsync();
        DishSelecteds = new();
        await DishSelectedsChanged.InvokeAsync(DishSelecteds);
        _mudAnhNhat.Refesh();
    }
}